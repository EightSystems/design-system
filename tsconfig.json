{
    "compilerOptions": {
        /* Where the Typescript compiler will output build files */
        "outDir": "build",

        /* This will compile every import and export into require() and module.exports declarations, 
        the default syntax in a Node environment */
        "module": "esnext",

        /* The target source will be in ES5 since we need to provide code that can be run 
        without further compilation/transformation */
        "target": "es5",

        /* Based on the target, TS automatically includes typings for the dom and the ES5 syntax. 
        Thatâ€™s why we need to specify ourselves we want typings for es2015 and the dom.
        This way we have all the es6 typings while targeting es5. */
        "lib": ["es6", "dom", "es2016", "es2017"],

        /* Allow for the generation of soruce-maps, useful for debugging */
        "sourceMap": true,

        /* Will allow for .js files along with .ts files */
        "allowJs": true,

        /* Turn of type checkers on .js files */
        "checkJs": false,

        /* Will generate correspondent .d.ts files for each .js/.ts file */
        "declaration": true,

        /* Emit .js files with JSX changed to the equivalent React.createElement calls */
        "jsx": "react",

        /* Specify the module resolution strategy to Node.js defaults */
        "moduleResolution": "node",

        /* Skip type-checking of declaration files during compile */
        "skipLibCheck": true,

        /* Fixes the problem where the compiler will treat CommonJS/AMD/UMD similar to ES6 modules,
        leading to mis-matched namespace and default imports in the compiled code */
        "esModuleInterop": true,

        /* Allows for the use of synthatic file exports */
        "allowSyntheticDefaultImports": true,

        /* Removes strict checking rules */
        "strict": false,

        /* Allows the importing of modules with the .json extension */
        "resolveJsonModule": true,

        "isolatedModules": true,

        /* Do not emit compiler output files like JavaScript source code, source-maps or declarations.
        This makes room for other tools like Babel to handle converting TypeScript to a file which can run
        inside a JavaScript environment. */
        "noEmit": true
    },

    /* Specifies an array of filenames or patterns to include in the program */
    "include": ["src/**/*"],

    /* Specifies an array of filenames or patterns that should be skipped when resolving include */
    "exclude": ["node_modules", "build", "dist", "rollup.config.js"]
}
